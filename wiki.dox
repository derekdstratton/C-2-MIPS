//Main Page:
 * /*! \mainpage Index
 *
 * This is the formal documentation for the Compilers project. This was written by
 * Derek Stratton and Chris Koh for CS 460. This is published for the demonstration on
 * November 9, 2018. The compiler's end goal is to translate source code in ANSI C
 * to target code in MIPS Assembler code. Currently, the project contains a scanner
 * and a parser integrated with a Symbol Table, and it can output tokens and productions.
 * It works with the parser to produce an Abstract Syntax Tree that performs semantic
 * analysis on the code that it parses.
 *
 * The compiler is written in C++. The Symbol Table is implemented as a class
 * that integrates with the scanner and parser. The scanner is implemented as a Lex (.l)
 * file that processes an input character stream and returns tokens. The parser is
 * implemented as a Yacc (.l) file that processes tokens from the scanner and returns
 * productions. The scanner uses Flex and the parser uses Bison for compilation. The
 * Abstract Syntax Tree is built as a tree from the n-ary tree library tree.hh. The
 * Compiler's build is automated with CMake, and it is being written and tested with the
 * IDE CLion.
 *
 * Some assumptions for this phase include that the Symbol Table does not have to process structs,
 * unions, typedefs, or enums. It is also assumed that octal, hexadecimal, and unicode
 * escape characters are not input. The compiler is restricted to receiving a character stream
 * from a file, and not from stdin. Functions are also restricted from having the same name as
 * variables in the Symbol Table.
 *
 * Limitation: can't do type checking on int a = 4; (all in one line, based on how the symbol table works)
 *
 * \section module Modules
 *
 * \ref symtable : The Symbol Table for the compiler.
 *
 * \ref scanner : The Scanner for the compiler.
 *
 * \ref parser : The Parser for the compiler.
 *
 * \ref ast : The Abstract Syntax Tree for the compiler.
 *
 * \section run_instr Instructions for Running the Compiler
 *
 * \subsection inst Installation
 *
 * `git clone https://github.com/derekdstratton/C-2-MIPS`
 *
    `cmake Best-C-Compiler`

    `make`

    \subsection run Running the ScannerParser

    `./ScannerParser [options] file_path`

    options:

    - `-d`, `-l`, `-s`, `-p`, `-o`

    - more details on the Parser page

    file_path:

    - The path to the file being compiled.

    \subsection links Relevant Links
    Flex: https://www.gnu.org/software/flex/

    Bison: https://www.gnu.org/software/bison/

    tree.hh: http://tree.phi-sci.com/

 */

 //Symbol Table:
/*! \page symtable Symbol Table
 *
 * The Symbol Table is a class that communicates with the Scanner and Parser to
 * track and store data about identifiers encountered. The main table variable in the
 * class is a list of maps that have a key of type string and a value of type %Node.
 * The list is treated like a stack. The %Node class is a collection of data corresponding
 * to each identifier. For more information about the technical details of these classes,
 * view the SymbolTable or Node page.
 *
 * \section drive_symtable Symbol Table Driver
 *
 * The Symbol Table can be run with the driver https://github.com/derekdstratton/C-2-MIPS/blob/master/SymbolTableDriver.cpp.
 *
 * To run the test driver, run `./%SymbolTableDriver`. The prompt gives details of how to use the Symbol Table.
 *
   \section test_symtable Testing the Symbol Table

   The Symbol Table can be tested with the test driver https://github.com/derekdstratton/C-2-MIPS/blob/master/SymbolTableTest.cpp.

  To run the test driver, run `./%SymbolTableTest`

  To view the output, go to this file:

  - https://github.com/derekdstratton/C-2-MIPS/blob/master/SymbolTableTestOutput.txt

  * Note, the Symbol Table test driver inputs default empty nodes. They have a default
  * line number of -1, default column number of -1, and type int.

  From there, the program will prompt you to add a number corresponding to the
  desired test case. The numbers can be found in the documentation for SymbolTableDriver.cpp
  or in the comments of that file in the source code.

   \section links_symtable Links

  Symbol Table Class Documentation: SymbolTable

  Symbol Table Source Code:
    - https://github.com/derekdstratton/C-2-MIPS/blob/master/SymbolTable.cpp
    - https://github.com/derekdstratton/C-2-MIPS/blob/master/SymbolTable.h

  %Node Class Documentation: Node

  %Node Source Code:
    - https://github.com/derekdstratton/C-2-MIPS/blob/master/Node.cpp
    - https://github.com/derekdstratton/C-2-MIPS/blob/master/Node.h

*/

//Scanner:
/*! \page scanner Scanner
 *
  The Scanner is written in C++ and runs with Flex. The Scanner returns tokens
  and outputs tokens to file. It also recognizes special debug tokens, and causes
  output from them. When the Scanner sees identifiers, it stores them along with
  other information like the line number. It also tracks and outputs warning such
  as identifiers being too long and integer constants being too long.

  \section test_scanner Testing the Scanner

  The Scanner can be tested by running the Test Files with `ScannerParser`. The
  program argument should contain a file from the tests folder.

  - https://github.com/derekdstratton/C-2-MIPS/tree/master/tests

  These tests can be compared with their outputs, found in the tests/output directory.

  - https://github.com/derekdstratton/C-2-MIPS/tree/master/tests/output

  \section tech_details Technical Details

  \subsection debug_tokens Debug Tokens

  `!!S`: Dumps all Symbol Table info to output stream

  `!!M`: Outputs Symbol Table mode

  `!!P`: Toggles production output to file on and off

  \subsection error_warn Errors and Warnings Output

  Identifier Too Large: A warning is thrown if an identifier is over 31 characters long.

  Integer Too Large: A warning is thrown if an integer constant does not fit in the space for an int.

  Float Too Large: A warning is thrown if a floating constant does not fit in the space for a float.

  Shadowing Error: A warning is thrown if a variable is shadowing one from an outer scope.

  Redeclaration Error: An error is thrown is a variable is redeclared in the same scope.

  \section links_scanner Links

  Scanner Lex File:

  - https://github.com/derekdstratton/C-2-MIPS/blob/master/scanner.l
*/

//Parser:
/*! \page parser Parser
 *
  The Parser receives tokens from the Scanner and creates productions from them
  and finds syntax errors. It is written in C++ and runs with Bison. This file
  defines the tokens and the productions for the grammar. It also contains the
  main function for running the ScannerParser, which includes options for the
  command line arguments. The Symbol Table is declared in this file as well (and
  the Lex file has access to it). The source code interspersed with productions
  is printed to a file called list_file by default after running the Parser.

  \section test_parser Testing the Parser

  The Parser can be tested by running the Test Files with `ScannerParser`. The
  program argument should contain a file from the tests folder.

  - https://github.com/derekdstratton/C-2-MIPS/tree/master/tests

  These tests can be compared with their outputs, found in the tests/output directory.

  - https://github.com/derekdstratton/C-2-MIPS/tree/master/tests/output

  \section tech_details Technical Details

  \subsection debug_options Command Line Debug Options

    - `-d`: enables the -l and -s debug flags to work

    - `-l`: outputs the source code token, the token name, and token value of all tokens to a file called tokens.out

    - `-s`: dumps the symbol table at the beginning and end of each block to a file called SymDump.out

    - `-p`: outputs recorded productions to a file called productions.out. The token '!!P' in the source
    file toggles on and off recording the productions. By default, production recording is turned on.

    - `-o`: outputs the final output of the parser (source code interspersed with reductions) to
    be written to a specific file. The -o flag must be followed by a space and then the file name.
    If the -o flag is not used, this final output is written to list_file.

  \section links_parser Links

  Parser Yacc File:

  - https://github.com/derekdstratton/C-2-MIPS/blob/master/parse.y
*/

//AST:
/*! \page ast Abstract Syntax Tree
 *
  todo

  \section test_ast Testing the Abstract Syntax Tree

  todo

  \section tech_details Technical Details

  todo

  \section links_ast Links

  todo

*/

//Reference:

// https://www.stack.nl/~dimitri/doxygen/manual/commands.html