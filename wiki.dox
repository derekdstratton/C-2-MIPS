//Main Page:
 * /*! \mainpage Index
 *
 * This is the formal documentation for the C Compiler project. [more overview details]
 *
 * \section contents Table of Contents
 *
 * \ref symtable : The Symbol Table for the compiler.
 *
 * \ref scanner : The Scanner for the compiler.
 *
 * \ref parser : The Parser for the compiler.
 *
 * \section run_instr Instructions for Running the Compiler
 *
 * This is where you say how to run things.
 *
 */

 //Symbol Table:
/*! \page symtable Symbol Table
 *
 * The Symbol Table is a class that communicates with the Scanner and Parser to
 * track and store data about identifiers encountered. The main table variable in the
 * class is a list of maps that have a key of type string and a value of type Node.
 * The list is treated like a stack. The %Node class is a collection of data corresponding
 * to each identifier. For more information about the technical details of these classes,
 * view the SymbolTable or Node page.
 *
   \section test_symtable Testing the Symbol Table

   The Symbol Table can be tested with the test driver SymbolTableDriver.cpp.

  To run the test driver, run `%SymbolTable` in CLion.

  From there, the program will prompt you to add a number corresponding to the
  desired test case. The numbers can be found in the documentation for SymbolTableDriver.cpp
  or in the comments of that file in the source code.

   \section links_symtable Links

  Symbol Table Class Documentation: SymbolTable

  Symbol Table Source Code:
    - https://github.com/derekdstratton/Best-C-Compiler/blob/master/SymbolTable.cpp
    - https://github.com/derekdstratton/Best-C-Compiler/blob/master/SymbolTable.h

  %Node Class Documentation: Node

  %Node Source Code:
    - https://github.com/derekdstratton/Best-C-Compiler/blob/master/Node.cpp
    - https://github.com/derekdstratton/Best-C-Compiler/blob/master/Node.h

*/

//Scanner:
/*! \page scanner Scanner
 *
  insert overview details

  \section test_scanner Testing the Scanner

  The Scanner can be tested by running the Test Files with `ScannerParser`. The
  program argument should contain a file from the tests folder.

  - https://github.com/derekdstratton/Best-C-Compiler/tree/master/tests

  These tests can be compared with their outputs, found in the tests/output directory.

  - https://github.com/derekdstratton/Best-C-Compiler/tree/master/tests/output

  \section links_scanner Links
  links to actual file, test cases, and outputs
*/

//Parser:
/*! \page parser Parser
 *
  Even more info.

  \section test_parser Testing the Parser

  can probably copy/paste this from scanner one

  \section links_parser Links

  links to actual file, test cases, and outputs
*/

//Reference:

// https://www.stack.nl/~dimitri/doxygen/manual/commands.html